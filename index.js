require('dotenv').config()
const Bot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();

const token = `${process.env.SECRET_KEY}`;

const bot = new Bot(token, {
    polling: {
        interval: 300,
        autoStart: true
    }
});
bot.on("polling_error", (err) => {
    console.error(err);
    if (err && err.data && err.data.error && err.data.error.message) {
      console.log(err.data.error.message);
    }
});

const db = new sqlite3.Database('db.db', (err) => {
    if (err) {
      console.error(err.message);
    } else {
      console.log('Connected to the SQLite database.');
    }
  });
  
db.serialize(() => {
    db.run(`
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        name TEXT,
        phone_number TEXT,
        address TEXT,
        status TEXT
    );`);

    db.run(`
    CREATE TABLE IF NOT EXISTS orders (
      id INTEGER PRIMARY KEY,
      user_id INTEGER,
      pizza TEXT,
      supplements TEXT,
      total_price INTEGER
    );`);

    db.run(`
    CREATE TABLE IF NOT EXISTS pizzas (
      id INTEGER PRIMARY KEY,
      title TEXT,
      composition TEXT,
      price INTEGER
    );`);

    db.run(`
    CREATE TABLE IF NOT EXISTS supplements (
      id INTEGER PRIMARY KEY,
      title TEXT,
      price INTEGER
    );`);
    
    db.run(`INSERT OR REPLACE INTO pizzas (id, title, composition, price) VALUES 
    (1, '–°–∞–ª—è–º—ñ', '–°–æ—É—Å –ø–µ–ª–∞—Ç—ñ, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞, —Å–∞–ª—è–º—ñ.', '189'),
    (2, '–ì–∞–≤–∞–π—Å—å–∫–∞', '–°–æ—É—Å –ø–µ–ª–∞—Ç—ñ, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞ , –ø–æ–º—ñ–¥–æ—Ä —á–µ—Ä—ñ.', '180'),
    (3, '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–°–æ—É—Å –ø–µ–ª–∞—Ç—ñ, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞ , –ø–æ–º—ñ–¥–æ—Ä —á–µ—Ä—ñ.', '180'),
    (4, '–¶–µ–∑–∞—Ä—ñ–æ', '–í–µ—Ä—à–∫–æ–≤–∏–π —Å–æ—É—Å, –∞–≤—Ç–æ—Ä—Å—å–∫–∏–π —Å–æ—É—Å —Ü–µ–∑–∞—Ä, –ø–µ—á–µ–Ω–µ –∫—É—Ä—è—á–µ —Ñ—ñ–ª–µ, —Å–∏—Ä –ø–∞—Ä–º–µ–∑–∞–Ω, —Å–∞–ª–∞—Ç –∞–π–∑–±–µ—Ä–≥, –ª–∏—Å—Ç—è —Å–≤—ñ–∂–æ–≥–æ —Å–∞–ª–∞—Ç—É, –ø–µ—Ä–µ–ø–µ–ª–∏–Ω—ñ —è–π—Ü—è, –ø–æ–º—ñ–¥–æ—Ä —á–µ—Ä—ñ.', '205'),
    (5, '–ú–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–∞', '–°–æ—É—Å –ø–µ–ª–∞—Ç—ñ, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞, –±–µ–∫–æ–Ω, —á–æ—Ä—ñ–∑–æ, –±–æ–ª–≥–∞—Ä—Å—å–∫–∏–π –ø–µ—Ä–µ—Ü—å, –ø–æ–º—ñ–¥–æ—Ä —á–µ—Ä—ñ, —Å–∏–Ω—è —Ü–∏–±—É–ª—è, —Å–æ—É—Å —Å–ø–∞–π—Å—ñ, –ø–µ—Ä–µ—Ü—å —á–∏–ª—ñ.', '210'),
    (6, '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞', '–í–µ—Ä—à–∫–æ–≤–∏–π —Å–æ—É—Å, –±–µ–∫–æ–Ω, —Å–∏—Ä –ø–∞—Ä–º–µ–∑–∞–Ω, —Å–∏–Ω—è —Ü–∏–±—É–ª—è, —è—î—á–Ω–∏–π –∂–æ–≤—Ç–æ–∫.', '195'),
    (7, '–ú–æ—Ä—Å—å–∫–∞', '–°–æ—É—Å –≤–µ—Ä—à–∫–æ–≤–∏–π, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞, —Ñ—ñ–ª–µ –ª–æ—Å–æ—Å—è, –∫—Ä–µ–≤–µ—Ç–∫–∏, –∫–∞–ø–µ—Ä—Å–∏, –º—ñ–∫—Å —Å–∞–ª–∞—Ç—É, –∫—Ä–µ–º —Å–∏—Ä, –ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ —Å–≤—ñ–∂—ñ, —Å–∏—Ä –ø–∞—Ä–º–µ–∑–∞–Ω, —Å–æ—É—Å —É–Ω–∞–≥—ñ.', '285');
    `);

    db.run(`INSERT OR REPLACE INTO supplements (id, title, price) VALUES 
    (1, '–í–æ–¥–∞ –≥–∞–∑–æ–≤–∞–Ω–∞ (0,5 –º–ª) | 25–≥—Ä–Ω', '25'),
    (2, 'Coca-Cola (0,75 –ª) | 45–≥—Ä–Ω', '45'),
    (3, 'Coca-Cola (0,5 –ª) | 35–≥—Ä–Ω', '35'),
    (4, '–Ø–±–ª—É—á–Ω–∏–π —Å—ñ–∫ (0,95 –º–ª) | 75–≥—Ä–Ω', '75'),
    (5, '–ê–Ω–∞–Ω–∞—Å–æ–≤–∏–π —Å—ñ–∫ (0,95 –º–ª) | 75–≥—Ä–Ω', '75'),
    (6, '–ú—É–ª—å—Ç–∏—Ñ—Ä—É–∫—Ç–æ–≤–∏–π —Å—ñ–∫ (0,95 –º–ª) | 75–≥—Ä–Ω', '75'),
    (7, '–¢–æ–º–∞—Ç–Ω–∏–π —Å—ñ–∫ (0,95 –º–ª) | 75–≥—Ä–Ω', '75'),
    (8, '–ë–∞–Ω–∞–Ω–æ–≤–∏–π —Å—ñ–∫ (0,95 –º–ª) | 75–≥—Ä–Ω', '75')
    `);
});


function mainMenuKeyboard() {
    return {
        keyboard: [
            ["üçï ¬∑ –ú–µ–Ω—é"],
            ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
            ['‚ÑπÔ∏è ¬∑ –ú–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', "üìû ¬∑ –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫"]
        ],
        resize_keyboard: true
    };
}

bot.onText(/\/start/, async (msg) => {
    const photo = './img/start.png';
    const caption = '‚úåÔ∏è ¬∑ –í—ñ—Ç–∞—î–º–æ –≤ Vaysed Pizza!\n–•–æ—á–µ—à —Å–≤—ñ–∂–µ–Ω—å–∫—É –ø—ñ—Ü—É–ª—é —Ç—É—Ç —ñ –∑–∞—Ä–∞–∑? –¢–∏ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –º—ñ—Å—Ü—ñ.\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ–Ω—é –≤–Ω–∏–∑—É, —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.';

    await bot.sendPhoto(msg.chat.id, photo, {
        caption,
        reply_markup: mainMenuKeyboard()
    });
});

bot.onText(/üçï ¬∑ –ú–µ–Ω—é/, async (msg) => {
    const photo = './img/menu-footer.png';
    const caption = 'üçï ¬∑ –ú–µ–Ω—é.\n–í–∏–±–∏—Ä–∞–π —è–∫—É –ø—ñ—Ü—É —Ö–æ—á–µ—à: –≤–ª–∞—Å–Ω—É —á–∏ –≥–æ—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç?';

    await bot.sendPhoto(msg.chat.id, photo, {
        caption,
        reply_markup: {
            keyboard: [
                ["üò∏ ¬∑ –ì–æ—Ç–æ–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏", "üñåÔ∏è ¬∑ –í–ª–∞—Å–Ω–∞ –ø—ñ—Ü–∞"],
                ["‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"]
            ],
            resize_keyboard: true
        },
    });

});

bot.onText(/‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é/, async (msg) => {
    await bot.sendMessage(msg.chat.id, 'ü™ß ¬∑ –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', {
        reply_markup: mainMenuKeyboard()
    });
});

bot.onText(/üò∏ ¬∑ –ì–æ—Ç–æ–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏/, async (msg) => {
    await db.all("SELECT * FROM pizzas", async function (err, result) {
        const menu = result.map((item) => ([{
            text: item.title,
            callback_data: item.title
        }]))
        console.log(menu)
        await bot.sendMessage(msg.chat.id, 'üò∏ ¬∑ –ì–æ—Ç–æ–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏.', {
            reply_markup: {
                keyboard: [
                    ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
                    ["‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"]
                ],
                resize_keyboard: true
            }
        });
        await bot.sendMessage(msg.chat.id, '–û–±–∏—Ä–∞–π –Ω–∏–∂—á–µ.', {
            reply_markup: {
                inline_keyboard: menu
            }
        });
    });


});

bot.onText(/‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤/, async (msg) => {
    
    await bot.sendMessage(msg.chat.id, '–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –ø—ñ—Ü–∏.', {
        reply_markup: {
            keyboard: [
                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
                ["‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"]
            ],
            resize_keyboard: true
        }
    });
    await db.all("SELECT * FROM pizzas", async function (err, result) {
        const menu = result.map((item) => ([{
            text: item.title,
            callback_data: item.title
        }]))
        await bot.sendMessage(msg.chat.id, '–û–±–∏—Ä–∞–π –Ω–∏–∂—á–µ.', {
            // get from DB
            reply_markup: {
                inline_keyboard: menu

            }
        });
    });

});


bot.on("callback_query", async (ctx) => {

    db.get('SELECT * FROM pizzas WHERE title = ?', [ctx.data], async function (err, result) {
        console.log('ONE ROW => ', result)
    })


    switch (ctx.data) {
        case "–°–∞–ª—è–º—ñ":
                db.get('SELECT * FROM pizzas WHERE id = 1', async function(err, row) {
                    if (row) {
                        const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                        console.log(row.title)
                        await bot.sendPhoto(ctx.message.chat.id, './img/salami.webp', { caption: pizza,
                            reply_markup: {
                                keyboard: [
                                    ["–ó–∞–º–æ–≤–∏—Ç–∏ –°–∞–ª—è–º—ñ"],
                                    ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                    ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                                ],
                                resize_keyboard: true
                            }, 
                        });
                    }
                })                   
            break;

        case "–ì–∞–≤–∞–π—Å—å–∫–∞":
            db.get('SELECT * FROM pizzas WHERE id = 2', async function(err, row) {
                if (row) {
                    const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                    console.log(row.title)
                    await bot.sendPhoto(ctx.message.chat.id, './img/havai.webp', { caption: pizza,
                        reply_markup: {
                            keyboard: [
                                ["–ó–∞–º–æ–≤–∏—Ç–∏ –ì–∞–≤–∞–π—Å—å–∫–∞"],
                                ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                            ],
                            resize_keyboard: true
                        }, 
                    });
                }
            })
            break;

        case "–¶–µ–∑–∞—Ä—ñ–æ":
            db.get('SELECT * FROM pizzas WHERE id = 4', async function(err, row) {
                if (row) {
                    const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                    console.log(row.title)
                    await bot.sendPhoto(ctx.message.chat.id, './img/Cezar.webp', { caption: pizza,
                        reply_markup: {
                            keyboard: [
                                ["–ó–∞–º–æ–≤–∏—Ç–∏ –¶–µ–∑–∞—Ä—ñ–æ"],
                                ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                            ],
                            resize_keyboard: true
                        }, 
                    });
                }
            })
        
            break;

        case "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞":
            db.get('SELECT * FROM pizzas WHERE id = 3', async function(err, row) {
                if (row) {
                    const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                    console.log(row.title)
                    await bot.sendPhoto(ctx.message.chat.id, './img/margaret.webp', { caption: pizza,
                        reply_markup: {
                            keyboard: [
                                ["–ó–∞–º–æ–≤–∏—Ç–∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"],
                                ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                            ],
                            resize_keyboard: true
                        }, 
                    });
                }
            })
            break;
          
        case "–ú–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–∞":
            db.get('SELECT * FROM pizzas WHERE id = 5', async function(err, row) {
                if (row) {
                    const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                    console.log(row.title)
                    await bot.sendPhoto(ctx.message.chat.id, './img/mexic.webp', { caption: pizza,
                        reply_markup: {
                            keyboard: [
                                ["–ó–∞–º–æ–≤–∏—Ç–∏ –ú–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–∞"],
                                ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                            ],
                            resize_keyboard: true
                        }, 
                    });
                }
            })
            break;
          
        case "–ö–∞—Ä–±–æ–Ω–∞—Ä–∞":
            db.get('SELECT * FROM pizzas WHERE id = 6', async function(err, row) {
                if (row) {
                    const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                    console.log(row.title)
                    await bot.sendPhoto(ctx.message.chat.id, './img/karbonara.webp', { caption: pizza,
                        reply_markup: {
                            keyboard: [
                                ["–ó–∞–º–æ–≤–∏—Ç–∏ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞"],
                                ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                            ],
                            resize_keyboard: true
                        }, 
                    });
                }
            })
            break;
          
        case "–ú–æ—Ä—Å—å–∫–∞":
            db.get('SELECT * FROM pizzas WHERE id = 7', async function(err, row) {
                if (row) {
                    const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                    console.log(row.title)
                    await bot.sendPhoto(ctx.message.chat.id, './img/sea.jpg', { caption: pizza,
                        reply_markup: {
                            keyboard: [
                                ["–ó–∞–º–æ–≤–∏—Ç–∏ –ú–æ—Ä—Å—å–∫–∞"],
                                ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                            ],
                            resize_keyboard: true
                        }, 
                    });
                }
            })
            break;
    

}})



async function getPizzaPrice(pizzaTitle) {
    return new Promise((resolve, reject) => {
        db.get('SELECT price FROM pizzas WHERE title = ?', [pizzaTitle], (err, row) => {
            if (err) {
                console.error('Error fetching pizza price:', err);
                reject(err);
            } else {
                if (row) {
                    resolve(row.price);
                } else {
                    resolve(null);
                }
            }
        });
    });
}

async function addToCart(userId, pizzaTitle) {
    const price = await getPizzaPrice(pizzaTitle);
    if (price === null) {
        throw new Error(`Price for pizza "${pizzaTitle}" not found`);
    }

    return new Promise((resolve, reject) => {
        db.get('SELECT id, pizza, total_price FROM orders WHERE user_id = ?', [userId], (err, row) => {
            if (err) {
                console.error('Error fetching order:', err);
                reject(err);
            } else {
                if (row) {
                    const updatedPizzaList = row.pizza + `\n${pizzaTitle}`;
                    const updatedTotalPrice = row.total_price + price;
                    db.run('UPDATE orders SET pizza = ?, total_price = ? WHERE id = ?', [updatedPizzaList, updatedTotalPrice, row.id], (updateErr) => {
                        if (updateErr) {
                            console.error('Error updating order:', updateErr);
                            reject(updateErr);
                        } else {
                            resolve();
                        }
                    });
                } else {
                    db.run('INSERT INTO orders (user_id, pizza, total_price) VALUES (?, ?, ?)', [userId, pizzaTitle, price], (insertErr) => {
                        if (insertErr) {
                            console.error('Error inserting new order:', insertErr);
                            reject(insertErr);
                        } else {
                            resolve();
                        }
                    });
                }
            }
        });
    });
}


bot.onText(/–ó–∞–º–æ–≤–∏—Ç–∏ (–°–∞–ª—è–º—ñ|–ì–∞–≤–∞–π—Å—å–∫–∞|–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞|–¶–µ–∑–∞—Ä—ñ–æ|–ú–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–∞|–ö–∞—Ä–±–æ–Ω–∞—Ä–∞|–ú–æ—Ä—Å—å–∫–∞)/, async (msg, match) => {
    const pizzaTitle = match[1];
    try {
        await addToCart(msg.chat.id, pizzaTitle);
        await bot.sendMessage(msg.chat.id, `–ü—ñ—Ü–∞ "${pizzaTitle}" –¥–æ–¥–∞–Ω–∞ –¥–æ –∫–æ—à–∏–∫–∞.`);
    } catch (error) {
        await bot.sendMessage(msg.chat.id, `–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
});

bot.onText(/üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è/, async (msg) => {
    db.get('SELECT pizza, supplements, total_price FROM orders WHERE user_id = ?', [msg.chat.id], async (err, row) => {
        if (err) {
            console.error('Error fetching order:', err);
            await bot.sendMessage(msg.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.', {
                reply_markup: {
                    keyboard: [
                        ["ü•§ ¬∑ –î–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–∏"],
                        ["üß∫ ¬∑ –ó–∞–º–æ–≤–∏—Ç–∏"],
                        ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"]
                    ],
                    resize_keyboard: true
                }, 
            });
        } else {
           if (row) {
                const pizzas = row.pizza;
                const supplements = row.supplements ? `\n\n–î–æ–¥–∞—Ç–∫–∏:\n${row.supplements}` : '';
                const totalPrice = row.total_price;
                await bot.sendMessage(msg.chat.id, `–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n${pizzas}${supplements}\n\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${totalPrice} –≥—Ä–Ω`, {
                    reply_markup: {
                        keyboard: [
                            ["ü•§ ¬∑ –î–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–∏"],
                            ["üß∫ ¬∑ –ó–∞–º–æ–≤–∏—Ç–∏"],
                            ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"]
                        ],
                        resize_keyboard: true
                    }, 
                });
            } else {
                await bot.sendMessage(msg.chat.id, '–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.', {
                    reply_markup: {
                        keyboard: [
                            ["ü•§ ¬∑ –î–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–∏"],
                            ["üß∫ ¬∑ –ó–∞–º–æ–≤–∏—Ç–∏"],
                            ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"]
                        ],
                        resize_keyboard: true
                    }, 
                });
            }
        }
    });
});

async function getSupplementPrice(supplementTitle) {
    return new Promise((resolve, reject) => {
        db.get('SELECT price FROM supplements WHERE title = ?', [supplementTitle], (err, row) => {
            if (err) {
                console.error('Error fetching supplement price:', err);
                reject(err);
            } else {
                if (row) {
                    resolve(row.price);
                } else {
                    resolve(null);
                }
            }
        });
    });
}

async function addSupplementToCart(userId, supplementTitle) {
    const price = await getSupplementPrice(supplementTitle);
    if (price === null) {
        throw new Error(`Price for supplement "${supplementTitle}" not found`);
    }

    return new Promise((resolve, reject) => {
        db.get('SELECT id, supplements, total_price FROM orders WHERE user_id = ?', [userId], (err, row) => {
            if (err) {
                console.error('Error fetching order:', err);
                reject(err);
            } else {
                if (row) {
                    const updatedSupplementList = row.supplements ? row.supplements + `\n${supplementTitle}` : supplementTitle;
                    const updatedTotalPrice = row.total_price + price;
                    db.run('UPDATE orders SET supplements = ?, total_price = ? WHERE id = ?', [updatedSupplementList, updatedTotalPrice, row.id], (updateErr) => {
                        if (updateErr) {
                            console.error('Error updating order:', updateErr);
                            reject(updateErr);
                        } else {
                            resolve();
                        }
                    });
                } else {
                    db.run('INSERT INTO orders (user_id, supplements, total_price) VALUES (?, ?, ?)', [userId, supplementTitle, price], (insertErr) => {
                        if (insertErr) {
                            console.error('Error inserting new order:', insertErr);
                            reject(insertErr);
                        } else {
                            resolve();
                        }
                    });
                }
            }
        });
    });
}

bot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    const supplementTitle = callbackQuery.data;

    try {
        await addSupplementToCart(message.chat.id, supplementTitle);
        await bot.sendMessage(message.chat.id, `–î–æ–¥–∞—Ç–æ–∫ "${supplementTitle}" –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–æ—à–∏–∫–∞.`);
    } catch (error) {
        await console.error(message.chat.id, `–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
});


bot.onText(/ü•§ ¬∑ –î–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–∏/, async (msg) => {
    await db.all("SELECT * FROM supplements", async (err, result) => {
        const supplements = result.map((item) => ([{
            text: item.title,
            callback_data: item.title
        }]));
        await bot.sendMessage(msg.chat.id, '–û–±–∏—Ä–∞–π –Ω–∏–∂—á–µ.', {
            reply_markup: {
                inline_keyboard: supplements
            }
        });
    });
});


const state = {};


bot.onText(/üß∫ ¬∑ –ó–∞–º–æ–≤–∏—Ç–∏/, async (msg) => {
    const userId = msg.chat.id;
    const user = await new Promise((resolve, reject) => {
        db.get('SELECT * FROM users WHERE user_id = ?', [userId], (err, row) => {
            if (err) return reject(err);
            resolve(row);
        });
    });

    if (!user) {
        db.run('INSERT INTO users (user_id, status) VALUES (?, ?)', [userId, 'awaiting_name'], (err) => {
            if (err) {
                console.error('Error inserting user:', err);
                return;
            }
            bot.sendMessage(userId, '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.', {
                reply_markup: {
                    keyboard: [
                        ["‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"]
                    ],
                    resize_keyboard: true
                }, 
            });
            bot.sendMessage(userId, `–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è.\n–ü—Ä–∏–∫–ª–∞–¥: –°–≤—è—Ç–æ—Å–ª–∞–≤`);
        });
    } else if (user.status !== 'completed') {
        bot.sendMessage(userId, `–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑–±—ñ—Ä –¥–∞–Ω–∏—Ö. –í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è.\n–ü—Ä–∏–∫–ª–∞–¥: –°–≤—è—Ç–æ—Å–ª–∞–≤`);
    } else {
        bot.sendMessage(userId, '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.', {
            reply_markup: {
                keyboard: [
                    ["‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"]
                ],
                resize_keyboard: true
            }, 
        });
        bot.sendMessage(userId, `–í–∏ –≤–∂–µ –∑–±–µ—Ä–µ–≥–ª–∏ –∞–¥—Ä–µ—Å—É: ${user.address}. –ë–∞–∂–∞—î—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ó—ó –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–¢–∞–∫', callback_data: 'use_saved_address' }],
                    [{ text: '–ù—ñ', callback_data: 'update_address' }]
                ]
            }
        });
    }
});

bot.on('callback_query', (callbackQuery) => {
    const userId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data === 'use_saved_address') {
        bot.sendMessage(userId, `–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–µ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó –∞–¥—Ä–µ—Å–∏.\n–û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –≤—ñ–¥ –∫—É—Ä'—î—Ä–∞!`);
    } else if (data === 'update_address') {
        db.run('UPDATE users SET status = ? WHERE user_id = ?', ['awaiting_name', userId], (err) => {
            if (err) {
                console.error('Error updating user status:', err);
                return;
            }
            bot.sendMessage(userId, `–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è.\n–ü—Ä–∏–∫–ª–∞–¥: –°–≤—è—Ç–æ—Å–ª–∞–≤`);
        });
    }
});

bot.on('message', async (msg) => {
    const userId = msg.chat.id;
    const text = msg.text;

    const user = await new Promise((resolve, reject) => {
        db.get('SELECT * FROM users WHERE user_id = ?', [userId], (err, row) => {
            if (err) return reject(err);
            resolve(row);
        });
    });

    if (!user || !user.status) return;

    if (user.status === 'awaiting_name') {
        db.run('UPDATE users SET name = ?, status = ? WHERE user_id = ?', [text, 'awaiting_phone', userId], (err) => {
            if (err) {
                console.error('Error updating user name:', err);
                return;
            }
            bot.sendMessage(userId, '–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n–ü—Ä–∏–∫–ª–∞–¥: +380987654321');
        });
    } else if (user.status === 'awaiting_phone') {
        db.run('UPDATE users SET phone_number = ?, status = ? WHERE user_id = ?', [text, 'awaiting_address', userId], (err) => {
            if (err) {
                console.error('Error updating user phone number:', err);
                return;
            }
            bot.sendMessage(userId, '–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É:\n–ü—Ä–∏–∫–ª–∞–¥:–º. –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫, –≤—É–ª. –•–æ—Ä–æ—à–∞, –±—É–¥. 7, –∫–≤. 1');
        });
    } else if (user.status === 'awaiting_address') {
        db.run('UPDATE users SET address = ?, status = ? WHERE user_id = ?', [text, 'completed', userId], (err) => {
            if (err) {
                console.error('Error updating user address:', err);
                return;
            }
            bot.sendMessage(userId, `–í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–µ, –æ—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –≤—ñ–¥ –∫—É—Ä'—î—Ä–∞!`);
        });
    }
});




// bot.onText(/üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è/, async (msg) => {
//     console.log(msg.chat.id + " @" + msg.from.username);

//     db.all('SELECT DISTINCT pizza FROM orders WHERE user_id = ?', [msg.chat.id], async function (err, result) {
//         if (result && result.length > 0) {
//             const pizzas = result.map(row => row.pizza).join('\n');
//             console.log('->', pizzas);
//             bot.sendMessage(msg.chat.id, '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n' + pizzas)
//         }
//     });
    

// });


// bot.onText(/‚ÑπÔ∏è ¬∑ –ú–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è/, async (msg) => {
//   await bot.sendMessage(msg.chat.id, `üòé ¬∑ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n–Ü–º'—è: 123`, {
//     reply_markup: {
//       inline_keyboard: [
//         [{ text: "–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è", callback_data: 'changeUsername' }, { text: '–ì–∞–≤–∞–π—Å—å–∫–∞', callback_data: 'doneHavai' }],
//         [{ text: '–ú–∏—Å–ª–∏–≤—Å—å–∫–∞', callback_data: 'doneHunter' }, { text: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', callback_data: 'doneMargaret' }],
//         [{ text: '–ë–∞—Ä–±–µ–∫—é', callback_data: 'doneBbq' }, { text: '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞', callback_data: 'doneCarbonara' }],
//         [{ text: '–í–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω—Å—å–∫–∞', callback_data: 'doneSea' }],
//       ],

//     }
//   });
// });



console.log('Bot started')