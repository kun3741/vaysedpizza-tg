require('dotenv').config()
const Bot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();

const token = `${process.env.SECRET_KEY}`;

const bot = new Bot(token, {
    polling: {
        interval: 300,
        autoStart: true
    }
});
bot.on("polling_error", (err) => {
    console.error(err);
    if (err && err.data && err.data.error && err.data.error.message) {
      console.log(err.data.error.message);
    }
});

const db = new sqlite3.Database('db.db', (err) => {
    if (err) {
      console.error(err.message);
    } else {
      console.log('Connected to the SQLite database.');
    }
  });
  
db.serialize(() => {
    db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY,
      username TEXT,
      address TEXT,
      phone_number TEXT
    );`);
    db.run(`
    CREATE TABLE IF NOT EXISTS orders (
      id INTEGER PRIMARY KEY,
      user_id INTEGER,
      pizza TEXT
    );`); // ^ title or id of pizza
    // db.run(`CREATE TABLE IF NOT EXISTS addresses(
    //     id INTEGER PRIMARY KEY,
    //     address TEXT
    // )`)
    db.run(`
    CREATE TABLE IF NOT EXISTS pizzas (
      id INTEGER PRIMARY KEY,
      title TEXT,
      composition TEXT,
      price INTEGER
    );`);
    
    db.run(`INSERT OR REPLACE INTO pizzas (id, title, composition, price) VALUES 
    (1, '–°–∞–ª—è–º—ñ', '–°–æ—É—Å –ø–µ–ª–∞—Ç—ñ, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞, —Å–∞–ª—è–º—ñ.', '189'),
    (2, '–ì–∞–≤–∞–π—Å—å–∫–∞', '–°–æ—É—Å –ø–µ–ª–∞—Ç—ñ, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞ , –ø–æ–º—ñ–¥–æ—Ä —á–µ—Ä—ñ.', '180'),
    (3, '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–°–æ—É—Å –ø–µ–ª–∞—Ç—ñ, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞ , –ø–æ–º—ñ–¥–æ—Ä —á–µ—Ä—ñ.', '180'),
    (4, '–¶–µ–∑–∞—Ä—ñ–æ', '–í–µ—Ä—à–∫–æ–≤–∏–π —Å–æ—É—Å, –∞–≤—Ç–æ—Ä—Å—å–∫–∏–π —Å–æ—É—Å —Ü–µ–∑–∞—Ä, –ø–µ—á–µ–Ω–µ –∫—É—Ä—è—á–µ —Ñ—ñ–ª–µ, —Å–∏—Ä –ø–∞—Ä–º–µ–∑–∞–Ω, —Å–∞–ª–∞—Ç –∞–π–∑–±–µ—Ä–≥, –ª–∏—Å—Ç—è —Å–≤—ñ–∂–æ–≥–æ —Å–∞–ª–∞—Ç—É, –ø–µ—Ä–µ–ø–µ–ª–∏–Ω—ñ —è–π—Ü—è, –ø–æ–º—ñ–¥–æ—Ä —á–µ—Ä—ñ.', '205'),
    (5, '–ú–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–∞', '–°–æ—É—Å –ø–µ–ª–∞—Ç—ñ, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞, –±–µ–∫–æ–Ω, —á–æ—Ä—ñ–∑–æ, –±–æ–ª–≥–∞—Ä—Å—å–∫–∏–π –ø–µ—Ä–µ—Ü—å, –ø–æ–º—ñ–¥–æ—Ä —á–µ—Ä—ñ, —Å–∏–Ω—è —Ü–∏–±—É–ª—è, —Å–æ—É—Å —Å–ø–∞–π—Å—ñ, –ø–µ—Ä–µ—Ü—å —á–∏–ª—ñ.', '210'),
    (6, '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞', '–í–µ—Ä—à–∫–æ–≤–∏–π —Å–æ—É—Å, –±–µ–∫–æ–Ω, —Å–∏—Ä –ø–∞—Ä–º–µ–∑–∞–Ω, —Å–∏–Ω—è —Ü–∏–±—É–ª—è, —è—î—á–Ω–∏–π –∂–æ–≤—Ç–æ–∫.', '195'),
    (7, '–ú–æ—Ä—Å—å–∫–∞', '–°–æ—É—Å –≤–µ—Ä—à–∫–æ–≤–∏–π, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞, —Ñ—ñ–ª–µ –ª–æ—Å–æ—Å—è, –∫—Ä–µ–≤–µ—Ç–∫–∏, –∫–∞–ø–µ—Ä—Å–∏, –º—ñ–∫—Å —Å–∞–ª–∞—Ç—É, –∫—Ä–µ–º —Å–∏—Ä, –ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ —Å–≤—ñ–∂—ñ, —Å–∏—Ä –ø–∞—Ä–º–µ–∑–∞–Ω, —Å–æ—É—Å —É–Ω–∞–≥—ñ.', '285');
    `);
});

const Cart = {
    orders: {},
    addOrder: function(userId, pizza) {
        if (!this.orders[userId]) {
            this.orders[userId] = [];
        }
        this.orders[userId].push(pizza);
    },
    clearOrder: function(userId) {
        delete this.orders[userId];
    },
    getOrder: function(userId) {
        return this.orders[userId];
    }
};
  

function mainMenuKeyboard() {
    return {
        keyboard: [
            ["üçï ¬∑ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
            ["üìÉ ¬∑ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
            ['‚ÑπÔ∏è ¬∑ –ú–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', "üìû ¬∑ –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫"]
        ],
        resize_keyboard: true
    };
}

bot.onText(/\/start/, async (msg) => {
    const photo = './img/start.png';
    const caption = '‚úåÔ∏è ¬∑ –í—ñ—Ç–∞—î–º–æ –≤ Vaysed Pizza!\n–•–æ—á–µ—à —Å–≤—ñ–∂–µ–Ω—å–∫—É –ø—ñ—Ü—É–ª—é —Ç—É—Ç —ñ –∑–∞—Ä–∞–∑? –¢–∏ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –º—ñ—Å—Ü—ñ.\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ–Ω—é –≤–Ω–∏–∑—É, —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.';

    await bot.sendPhoto(msg.chat.id, photo, {
        caption,
        reply_markup: mainMenuKeyboard()
    });
});

bot.onText(/üçï ¬∑ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è/, async (msg) => {
    const photo = './img/menu-footer.png';
    const caption = 'üçï ¬∑ –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n–í–∏–±–∏—Ä–∞–π —è–∫—É –ø—ñ—Ü—É —Ö–æ—á–µ—à: –≤–ª–∞—Å–Ω—É —á–∏ –≥–æ—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç?';

    await bot.sendPhoto(msg.chat.id, photo, {
        caption,
        reply_markup: {
            keyboard: [
                ["üò∏ ¬∑ –ì–æ—Ç–æ–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏", "üñåÔ∏è ¬∑ –í–ª–∞—Å–Ω–∞ –ø—ñ—Ü–∞"],
                ["‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"]
            ],
            resize_keyboard: true
        },
    });

});

bot.onText(/‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é/, async (msg) => {
    await bot.sendMessage(msg.chat.id, 'ü™ß ¬∑ –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', {
        reply_markup: mainMenuKeyboard()
    });
});

bot.onText(/üò∏ ¬∑ –ì–æ—Ç–æ–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏/, async (msg) => {
    await db.all("SELECT * FROM pizzas", async function (err, result) {
        const menu = result.map((item) => ([{
            text: item.title,
            callback_data: item.title
        }]))
        console.log(menu)
        await bot.sendMessage(msg.chat.id, 'üò∏ ¬∑ –ì–æ—Ç–æ–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏.', {
            reply_markup: {
                keyboard: [
                    ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
                    ["‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"]
                ],
                resize_keyboard: true
            }
        });
        await bot.sendMessage(msg.chat.id, '–û–±–∏—Ä–∞–π –Ω–∏–∂—á–µ.', {
            reply_markup: {
                inline_keyboard: menu
                // [
                //     [{ text: '–°–∞–ª—è–º—ñ', callback_data: 'doneSalami' }, { text: '–ì–∞–≤–∞–π—Å—å–∫–∞', callback_data: 'doneHavai' }],
                //     [{ text: '–¶–µ–∑–∞—Ä—ñ–æ', callback_data: 'doneCezar' }, { text: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', callback_data: 'doneMargaret' }],
                //     [{ text: '–ú–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–∞', callback_data: 'doneMexic' }, { text: '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞', callback_data: 'doneCarbonara' }],
                //     [{ text: '–ú–æ—Ä—Å—å–∫–∞', callback_data: 'doneSea' }],
                // ],
            }
        });
    });


});

bot.onText(/‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤/, async (msg) => {
    
    await bot.sendMessage(msg.chat.id, '–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –ø—ñ—Ü–∏.', {
        reply_markup: {
            keyboard: [
                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
                ["‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"]
            ],
            resize_keyboard: true
        }
    });
    await db.all("SELECT * FROM pizzas", async function (err, result) {
        const menu = result.map((item) => ([{
            text: item.title,
            callback_data: item.title
        }]))
        await bot.sendMessage(msg.chat.id, '–û–±–∏—Ä–∞–π –Ω–∏–∂—á–µ.', {
            // get from DB
            reply_markup: {
                inline_keyboard: menu

            }
        });
    });

});


bot.on("callback_query", async (ctx) => {

    bot.onText("–ó–∞–º–æ–≤–∏—Ç–∏", async (msg) => {
        const orderText = formatOrderText(getOrder(msg));
            await bot.sendMessage(msg.chat.id, orderText, {
                reply_markup: {
                    keyboard: [
                        ["–¢–∞–∫", "–ù—ñ"],
                        ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"]
                    ],
                    resize_keyboard: true
                }
            });
    });

    db.get('SELECT * FROM pizzas WHERE title = ?', [ctx.data], async function (err, result) {
        console.log('ONE ROW => ', result)
    })


    switch (ctx.data) {
        case "–°–∞–ª—è–º—ñ":
                db.get('SELECT * FROM pizzas WHERE id = 1', async function(err, row) {
                    if (row) {
                        const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                        console.log(row.title)
                        await bot.sendPhoto(ctx.message.chat.id, './img/salami.webp', { caption: pizza,
                            reply_markup: {
                                keyboard: [
                                    ["–ó–∞–º–æ–≤–∏—Ç–∏ –°–∞–ª—è–º—ñ"],
                                    ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                    ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                                ],
                                resize_keyboard: true
                            }, 
                        });
                    }
                })
                
            break;

        case "–ì–∞–≤–∞–π—Å—å–∫–∞":
            db.get('SELECT * FROM pizzas WHERE id = 2', async function(err, row) {
                if (row) {
                    const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                    console.log(row.title)
                    await bot.sendPhoto(ctx.message.chat.id, './img/havai.webp', { caption: pizza,
                        reply_markup: {
                            keyboard: [
                                ["–ó–∞–º–æ–≤–∏—Ç–∏ –ì–∞–≤–∞–π—Å—å–∫–∞"],
                                ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                            ],
                            resize_keyboard: true
                        }, 
                    });
                }
            })
            break;

        case "–¶–µ–∑–∞—Ä—ñ–æ":
            db.get('SELECT * FROM pizzas WHERE id = 4', async function(err, row) {
                if (row) {
                    const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                    console.log(row.title)
                    await bot.sendPhoto(ctx.message.chat.id, './img/Cezar.webp', { caption: pizza,
                        reply_markup: {
                            keyboard: [
                                ["–ó–∞–º–æ–≤–∏—Ç–∏ –¶–µ–∑–∞—Ä—ñ–æ"],
                                ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                            ],
                            resize_keyboard: true
                        }, 
                    });
                }
            })
        
            break;

        case "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞":
            db.get('SELECT * FROM pizzas WHERE id = 3', async function(err, row) {
                if (row) {
                    const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                    console.log(row.title)
                    await bot.sendPhoto(ctx.message.chat.id, './img/margaret.webp', { caption: pizza,
                        reply_markup: {
                            keyboard: [
                                ["–ó–∞–º–æ–≤–∏—Ç–∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"],
                                ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                            ],
                            resize_keyboard: true
                        }, 
                    });
                }
            })
            break;
          
        case "–ú–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–∞":
            db.get('SELECT * FROM pizzas WHERE id = 5', async function(err, row) {
                if (row) {
                    const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                    console.log(row.title)
                    await bot.sendPhoto(ctx.message.chat.id, './img/mexic.webp', { caption: pizza,
                        reply_markup: {
                            keyboard: [
                                ["–ó–∞–º–æ–≤–∏—Ç–∏ –ú–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–∞"],
                                ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                            ],
                            resize_keyboard: true
                        }, 
                    });
                }
            })
            break;
          
        case "–ö–∞—Ä–±–æ–Ω–∞—Ä–∞":
            db.get('SELECT * FROM pizzas WHERE id = 6', async function(err, row) {
                if (row) {
                    const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                    console.log(row.title)
                    await bot.sendPhoto(ctx.message.chat.id, './img/karbonara.webp', { caption: pizza,
                        reply_markup: {
                            keyboard: [
                                ["–ó–∞–º–æ–≤–∏—Ç–∏ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞"],
                                ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                            ],
                            resize_keyboard: true
                        }, 
                    });
                }
            })
            break;
          
        case "–ú–æ—Ä—Å—å–∫–∞":
            db.get('SELECT * FROM pizzas WHERE id = 7', async function(err, row) {
                if (row) {
                    const pizza = '‚úåÔ∏è ¬∑ ' + row.title + '\n–°–∫–ª–∞–¥: ' + row.composition + '\n–¶—ñ–Ω–∞: ' + row.price + '–≥—Ä–Ω'
                    console.log(row.title)
                    await bot.sendPhoto(ctx.message.chat.id, './img/sea.jpg', { caption: pizza,
                        reply_markup: {
                            keyboard: [
                                ["–ó–∞–º–æ–≤–∏—Ç–∏ –ú–æ—Ä—Å—å–∫–∞"],
                                ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                            ],
                            resize_keyboard: true
                        }, 
                    });
                }
            })
            break;
    

}})

    bot.onText(`–ó–∞–º–æ–≤–∏—Ç–∏ –°–∞–ª—è–º—ñ`, async (ctx) => {
        Cart.addOrder(ctx.message.chat.id, salamiPizza); // –î–æ–¥–∞–π—Ç–µ —Ü—é –ø—ñ—Ü—É –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –∫–æ—à–∏–∫—É
        await bot.sendMessage(ctx.message.chat.id, `–ü—ñ—Ü–∞ ${salamiPizza.salami} –±—É–ª–∞ –¥–æ–¥–∞–Ω–∞ –¥–æ –≤–∞—à–æ–≥–æ –∫–æ—à–∏–∫–∞.`);
        console.log('123') // –ü–æ–≤—ñ–¥–æ–º—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ –ø—ñ—Ü–∞ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞ –¥–æ –∫–æ—à–∏–∫–∞
    });






bot.onText(/üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è/, async (msg) => {
    console.log(msg.chat.id);
    bot.sendMessage(msg.chat.id, '1234 sssss')
});


// bot.onText(/‚ÑπÔ∏è ¬∑ –ú–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è/, async (msg) => {
//   await bot.sendMessage(msg.chat.id, `üòé ¬∑ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n–Ü–º'—è: 123`, {
//     reply_markup: {
//       inline_keyboard: [
//         [{ text: "–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è", callback_data: 'changeUsername' }, { text: '–ì–∞–≤–∞–π—Å—å–∫–∞', callback_data: 'doneHavai' }],
//         [{ text: '–ú–∏—Å–ª–∏–≤—Å—å–∫–∞', callback_data: 'doneHunter' }, { text: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', callback_data: 'doneMargaret' }],
//         [{ text: '–ë–∞—Ä–±–µ–∫—é', callback_data: 'doneBbq' }, { text: '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞', callback_data: 'doneCarbonara' }],
//         [{ text: '–í–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω—Å—å–∫–∞', callback_data: 'doneSea' }],
//       ],

//     }
//   });
// });



console.log('Bot started')