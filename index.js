require('dotenv').config()
const Bot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3');

const token = `${process.env.SECRET_KEY}`;
const bot = new Bot(token, {
    polling: {
        interval: 300,
        autoStart: true
    }
});
bot.on("polling_error", (err) => {
    if (err && err.data && err.data.error && err.data.error.message) {
      console.log(err.data.error.message);
    } else {
      console.log('undefined comand or error');
    }
});

const db = new sqlite3.Database('vaysed_pizza.db', (err) => {
    if (err) {
      console.error(err.message);
    } else {
      console.log('Connected to the SQLite database.');
    }
  });
  
  db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY,
      username TEXT,
      address TEXT,
      phone_number TEXT
    );
  
    CREATE TABLE IF NOT EXISTS orders (
      id INTEGER PRIMARY KEY,
      user_id INTEGER,
      pizza TEXT,
      address TEXT,
      phone_number TEXT,
      recipient_name TEXT,
      FOREIGN KEY (user_id) REFERENCES users (id)
    );
  `);
  
const orders = [];
  
  function storeOrder(msg, content) {
    const chatId = msg.payload.chatId
    if (!orders[chatId]) {
      orders[chatId] = [];
    }
    orders[chatId].push(content);
  }
  
  function getOrder(msg) {
    const chatId = msg.payload.chatId;
    return orders[chatId];
    console.log(chatId);
  }
  
  function formatOrderText(order) {
    let text = '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: \n';
    if (order.length === 0) {
      text = '–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –º–µ–Ω—é —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.';
    } else {
      order.forEach((pizza, index) => {
        text += `${index + 1}. ${pizza} \n`;
      });
    }
    return text;
  }

function mainMenuKeyboard() {
    return {
        keyboard: [
            ["üçï ¬∑ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
            ["üìÉ ¬∑ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
            ['‚ÑπÔ∏è ¬∑ –ú–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', "üìû ¬∑ –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫"]
        ],
        resize_keyboard: true
    };
}

bot.onText(/\/start/, async (msg) => {
    const photo = './img/start.png';
    const caption = '‚úåÔ∏è ¬∑ –í—ñ—Ç–∞—î–º–æ –≤ Vaysed Pizza!\n–•–æ—á–µ—à —Å–≤—ñ–∂–µ–Ω—å–∫—É –ø—ñ—Ü—É–ª—é —Ç—É—Ç —ñ –∑–∞—Ä–∞–∑? –¢–∏ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –º—ñ—Å—Ü—ñ.\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ–Ω—é –≤–Ω–∏–∑—É, —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.';

    await bot.sendPhoto(msg.chat.id, photo, {
        caption,
        reply_markup: mainMenuKeyboard()
    });
});

bot.onText(/üçï ¬∑ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è/, async (msg) => {
    const photo = './img/menu-footer.png';
    const caption = 'üçï ¬∑ –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n–í–∏–±–∏—Ä–∞–π —è–∫—É –ø—ñ—Ü—É —Ö–æ—á–µ—à: –≤–ª–∞—Å–Ω—É —á–∏ –≥–æ—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç?';

    await bot.sendPhoto(msg.chat.id, photo, {
        caption,
        reply_markup: {
            keyboard: [
                ["üò∏ ¬∑ –ì–æ—Ç–æ–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏", "üñåÔ∏è ¬∑ –í–ª–∞—Å–Ω–∞ –ø—ñ—Ü–∞"],
                ["‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"]
            ],
            resize_keyboard: true
        },
    });

});

bot.onText(/‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é/, async (msg) => {
    await bot.sendMessage(msg.chat.id, 'ü™ß ¬∑ –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', {
        reply_markup: mainMenuKeyboard()
    });
});

bot.onText(/üò∏ ¬∑ –ì–æ—Ç–æ–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏/, async (msg) => {
    await bot.sendMessage(msg.chat.id, 'üò∏ ¬∑ –ì–æ—Ç–æ–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏.', {
        reply_markup: {
            keyboard: [
                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
                ["‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"]
            ],
            resize_keyboard: true
        }
    });
    await bot.sendMessage(msg.chat.id, '–û–±–∏—Ä–∞–π –Ω–∏–∂—á–µ.', {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–°–∞–ª—è–º—ñ', callback_data: 'doneSalami' }, { text: '–ì–∞–≤–∞–π—Å—å–∫–∞', callback_data: 'doneHavai' }],
                [{ text: '–¶–µ–∑–∞—Ä—ñ–æ', callback_data: 'doneCezar' }, { text: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', callback_data: 'doneMargaret' }],
                [{ text: '–ú–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–∞', callback_data: 'doneMexic' }, { text: '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞', callback_data: 'doneCarbonara' }],
                [{ text: '–ú–æ—Ä—Å—å–∫–∞', callback_data: 'doneSea' }],
            ],
        }
    });
});

bot.onText(/‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤/, async (msg) => {
    await bot.sendMessage(msg.chat.id, '–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –ø—ñ—Ü–∏.', {
        reply_markup: {
            keyboard: [
                ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
                ["‚óÄ ¬∑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"]
            ],
            resize_keyboard: true
        }
    });

    await bot.sendMessage(msg.chat.id, '–û–±–∏—Ä–∞–π –Ω–∏–∂—á–µ.', {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–°–∞–ª—è–º—ñ', callback_data: 'doneSalami' }, { text: '–ì–∞–≤–∞–π—Å—å–∫–∞', callback_data: 'doneHavai' }],
                [{ text: '–¶–µ–∑–∞—Ä—ñ–æ', callback_data: 'doneCezar' }, { text: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', callback_data: 'doneMargaret' }],
                [{ text: '–ú–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–∞', callback_data: 'doneMexic' }, { text: '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞', callback_data: 'doneCarbonara' }],
                [{ text: '–ú–æ—Ä—Å—å–∫–∞', callback_data: 'doneSea' }],
            ],
        }
    });

});


bot.on("callback_query", async (ctx) => {

    const pizzas = [
        { salami: '–°–∞–ª—è–º—ñ', price: 189 },  
        { havai: '–ì–∞–≤–∞–π—Å—å–∫–∞', price: 190 },  
        { kozak: '–ö–æ–∑–∞—Ü—å–∫–∞', price: 150 },
        { margaret: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', price: 180 },
        { cezar: '–¶–µ–∑–∞—Ä—ñ–æ', price: 205 },  
        { mexic: '–ú–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–∞', price: 210 },  
        { karbonara: '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞', price: 195 }, 
        { sea: '–ú–æ—Ä—Å—å–∫–∞', price: 285 }, 
    ];
    
    bot.onText("–ó–∞–º–æ–≤–∏—Ç–∏", async (msg) => {
        const orderText = formatOrderText(getOrder(msg));
            await bot.sendMessage(msg.chat.id, orderText, {
                reply_markup: {
                    keyboard: [
                        ["–¢–∞–∫", "–ù—ñ"],
                        ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"]
                    ],
                    resize_keyboard: true
                }
            });
    });


    switch (ctx.data) {
        case "doneSalami":
            const salamiPizza = pizzas.find(pizza => pizza.salami);
            if (salamiPizza) {
                const caption = `‚úåÔ∏è ¬∑ ${salamiPizza.salami}. \n–°–∫–ª–∞–¥: –°–æ—É—Å –ø–µ–ª–∞—Ç—ñ, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞, —Å–∞–ª—è–º—ñ. \n–¶—ñ–Ω–∞: ${salamiPizza.price}–≥—Ä–Ω`;
                await bot.sendPhoto(ctx.message.chat.id, './img/salami.webp', { caption,
                    reply_markup: {
                        keyboard: [
                            ["–ó–∞–º–æ–≤–∏—Ç–∏ –°–∞–ª—è–º—ñ"],
                            ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"],
                            ["üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
                        ],
                        resize_keyboard: true
                    }, 
                });
            }
            break;

        case "doneHavai":
            const havaiPizza = pizzas.find(pizza => pizza.havai);
            if (havaiPizza) {
                const caption = `‚úåÔ∏è ¬∑ ${havaiPizza.havai}. \n–°–∫–ª–∞–¥: –°–æ—É—Å –ø–µ–ª–∞—Ç—ñ, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞, —à–∏–Ω–∫–∞, –∞–Ω–∞–Ω–∞—Å. \n–¶—ñ–Ω–∞: ${havaiPizza.price}–≥—Ä–Ω`;
                await bot.sendPhoto(ctx.message.chat.id, './img/havai.webp', { caption,
                
                    reply_markup: {
                        keyboard: [
                            [`–ó–∞–º–æ–≤–∏—Ç–∏ ${havaiPizza.havai}`],
                            ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"]
                        ],
                        resize_keyboard: true
                    }
                });
            }
            break;

        case "doneCezar":
            const cezarPizza = pizzas.find(pizza => pizza.cezar);
            if (cezarPizza) {
                const caption = `‚úåÔ∏è ¬∑ ${cezarPizza.cezar}.\n–°–∫–ª–∞–¥: –í–µ—Ä—à–∫–æ–≤–∏–π —Å–æ—É—Å, –∞–≤—Ç–æ—Ä—Å—å–∫–∏–π —Å–æ—É—Å —Ü–µ–∑–∞—Ä, –ø–µ—á–µ–Ω–µ –∫—É—Ä—è—á–µ —Ñ—ñ–ª–µ, —Å–∏—Ä –ø–∞—Ä–º–µ–∑–∞–Ω, —Å–∞–ª–∞—Ç –∞–π–∑–±–µ—Ä–≥, –ª–∏—Å—Ç—è —Å–≤—ñ–∂–æ–≥–æ —Å–∞–ª–∞—Ç—É, –ø–µ—Ä–µ–ø–µ–ª–∏–Ω—ñ —è–π—Ü—è, –ø–æ–º—ñ–¥–æ—Ä —á–µ—Ä—ñ. \n–¶—ñ–Ω–∞: ${cezarPizza.price}–≥—Ä–Ω`;
                await bot.sendPhoto(ctx.message.chat.id, './img/Cezar.webp', { caption,
                
                    reply_markup: {
                        keyboard: [
                            [`–ó–∞–º–æ–≤–∏—Ç–∏ ${cezarPizza.cezar}`],
                            ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"]
                        ],
                        resize_keyboard: true
                    }
                });
            }
        
            break;

        case "doneMargaret":
            const margaretPizza = pizzas.find(pizza => pizza.margaret);
            if (margaretPizza) {
                const caption = `‚úåÔ∏è ¬∑ ${margaretPizza.margaret}.\n–°–∫–ª–∞–¥: –°–æ—É—Å –ø–µ–ª–∞—Ç—ñ, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞ , –ø–æ–º—ñ–¥–æ—Ä —á–µ—Ä—ñ. \n–¶—ñ–Ω–∞: ${margaretPizza.price}–≥—Ä–Ω`;
                await bot.sendPhoto(ctx.message.chat.id, './img/margaret.webp', { caption,
                
                    reply_markup: {
                        keyboard: [
                            [`–ó–∞–º–æ–≤–∏—Ç–∏ ${margaretPizza.margaret}`],
                            ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"]
                        ],
                        resize_keyboard: true
                    }
                });
            }
            break;
          
        case "doneMexic":
            const mexicPizza = pizzas.find(pizza => pizza.mexic);
            if (mexicPizza) {
                const caption = `‚úåÔ∏è ¬∑ ${mexicPizza.mexic}.\n–°–æ—É—Å –ø–µ–ª–∞—Ç—ñ, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞, –±–µ–∫–æ–Ω, —á–æ—Ä—ñ–∑–æ, –±–æ–ª–≥–∞—Ä—Å—å–∫–∏–π –ø–µ—Ä–µ—Ü—å, –ø–æ–º—ñ–¥–æ—Ä —á–µ—Ä—ñ, —Å–∏–Ω—è —Ü–∏–±—É–ª—è, —Å–æ—É—Å —Å–ø–∞–π—Å—ñ, –ø–µ—Ä–µ—Ü—å —á–∏–ª—ñ. \n–¶—ñ–Ω–∞: ${mexicPizza.price}–≥—Ä–Ω`;
                await bot.sendPhoto(ctx.message.chat.id, './img/mexic.webp', { caption,
                
                    reply_markup: {
                        keyboard: [
                            [`–ó–∞–º–æ–≤–∏—Ç–∏ ${mexicPizza.mexic}`],
                            ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"]
                        ],
                        resize_keyboard: true
                    }
                });
            }
            break;
          
        case "doneCarbonara":
            const karbonaraPizza = pizzas.find(pizza => pizza.karbonara);
            if (karbonaraPizza) {
                const caption = `‚úåÔ∏è ¬∑ ${karbonaraPizza.karbonara}.\n–°–∫–ª–∞–¥: –í–µ—Ä—à–∫–æ–≤–∏–π —Å–æ—É—Å, –±–µ–∫–æ–Ω, —Å–∏—Ä –ø–∞—Ä–º–µ–∑–∞–Ω, —Å–∏–Ω—è —Ü–∏–±—É–ª—è, —è—î—á–Ω–∏–π –∂–æ–≤—Ç–æ–∫. \n–¶—ñ–Ω–∞: ${karbonaraPizza.price}–≥—Ä–Ω`;
                await bot.sendPhoto(ctx.message.chat.id, './img/karbonara.webp', { caption,
                
                    reply_markup: {
                        keyboard: [
                            [`–ó–∞–º–æ–≤–∏—Ç–∏ ${karbonaraPizza.karbonara}`],
                            ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"]
                        ],
                        resize_keyboard: true
                    }
                });
            }
            break;
          
        case "doneSea":
            const seaPizza = pizzas.find(pizza => pizza.sea);
            if (seaPizza) {
                const caption = `‚úåÔ∏è ¬∑ ${seaPizza.sea}.\n–°–æ—É—Å –≤–µ—Ä—à–∫–æ–≤–∏–π, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞, —Ñ—ñ–ª–µ –ª–æ—Å–æ—Å—è, –∫—Ä–∏–≤–µ—Ç–∫–∏, –∫–∞–ø–µ—Ä—Å–∏, –º—ñ–∫—Å —Å–∞–ª–∞—Ç—É, –∫—Ä–µ–º —Å–∏—Ä, –ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ —Å–≤—ñ–∂—ñ, —Å–∏—Ä –ø–∞—Ä–º–µ–∑–∞–Ω, —Å–æ—É—Å —É–Ω–∞–≥—ñ.  \n–¶—ñ–Ω–∞: ${seaPizza.price}–≥—Ä–Ω`;
                await bot.sendPhoto(ctx.message.chat.id, './img/vegan.jpg', { caption,
                
                    reply_markup: {
                        keyboard: [
                            [`–ó–∞–º–æ–≤–∏—Ç–∏ ${seaPizza.sea}`],
                            ["‚óÄÔ∏è ¬∑ –ù–∞–∑–∞–¥ –¥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"]
                        ],
                        resize_keyboard: true
                    }
                });
            }
            break;
    

    }
});




bot.onText(/üìÉ ¬∑ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è/, async (msg) => {
    bot.sendMessage(msg.chat.id, '1234')
});


// bot.onText(/‚ÑπÔ∏è ¬∑ –ú–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è/, async (msg) => {
//   await bot.sendMessage(msg.chat.id, `üòé ¬∑ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n–Ü–º'—è: 123`, {
//     reply_markup: {
//       inline_keyboard: [
//         [{ text: "–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è", callback_data: 'changeUsername' }, { text: '–ì–∞–≤–∞–π—Å—å–∫–∞', callback_data: 'doneHavai' }],
//         [{ text: '–ú–∏—Å–ª–∏–≤—Å—å–∫–∞', callback_data: 'doneHunter' }, { text: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', callback_data: 'doneMargaret' }],
//         [{ text: '–ë–∞—Ä–±–µ–∫—é', callback_data: 'doneBbq' }, { text: '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞', callback_data: 'doneCarbonara' }],
//         [{ text: '–í–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω—Å—å–∫–∞', callback_data: 'doneSea' }],
//       ],

//     }
//   });
// });



console.log('Bot started')